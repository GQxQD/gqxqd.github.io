[{"title":"JavaScript数组API","date":"2017-10-23T15:42:59.000Z","path":"20171023/array-methods-of-js.html","content":"<h1 id=\"JavaScript数组API\"><a href=\"#JavaScript数组API\" class=\"headerlink\" title=\"JavaScript数组API\"></a>JavaScript数组API</h1><blockquote>\n<p>本文摘自《JavaScript权威指南》（第6版）</p>\n</blockquote>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(size)</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(element0, element1, ..., elementn)</div></pre></td></tr></table></figure>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><h3 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a>size</h3><blockquote>\n<p>设定的数组元素个数。返回数组的length属性等于size。</p>\n</blockquote>\n<h3 id=\"element0-…elementn\"><a href=\"#element0-…elementn\" class=\"headerlink\" title=\"element0, …elementn\"></a>element0, …elementn</h3><blockquote>\n<p>参数列表，可以是两个或多个任意值[^1]。当Array()构造函数用这些参数调用时，新创建的数组实例会用指定的参数值来初始化，并将length属性设置为参数个数。</p>\n</blockquote>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><p>新创建和初始化的数组。</p>\n<ul>\n<li>不带参数时，返回的数组为空，length属性为0。</li>\n<li>当用单个数值参数调用时，返回带指定个数的未定义元素的数组。</li>\n<li>使用其他参数调用时，构造函数会使用指定参数值初始化数组。</li>\n<li>当Array()构造函数不带new操作符，直接当做函数调用时，其表现行为与带有new操作符调用时时完全一样的。</li>\n</ul>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><h3 id=\"RangeError\"><a href=\"#RangeError\" class=\"headerlink\" title=\"RangeError\"></a>RangeError</h3><blockquote>\n<p>当给Array()构造函数传入单个整数参数size时，如果size为负数，或大于$2^{32}-1$时，会抛出RangeError异常。</p>\n</blockquote>\n<h2 id=\"直接量语法\"><a href=\"#直接量语法\" class=\"headerlink\" title=\"直接量语法\"></a>直接量语法</h2><p>ECMAScript 3规定了数组的直接量语法。可以将逗号分隔的表达式列表放在方括号中来创建和初始化一个数组。这些表达式的值会成为数组的元素。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"literal\">true</span>, <span class=\"string\">'abc'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = [a[<span class=\"number\">0</span>], a[<span class=\"number\">0</span>]*<span class=\"number\">2</span>, f(x)];</div></pre></td></tr></table></figure>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p><strong><em>length</em></strong></p>\n<blockquote>\n<p>一个可读/写的整数，用来指明数组中的元素个数。当数组中的元素不连续时，length等于数组最后一个元素的序号加一。改变length值会裁剪或扩充数组。</p>\n</blockquote>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><blockquote>\n<p>ECMAScript 5中新增加了以下方法：every()、filter()、forEach()、indexOf()、lastIndexOf()、map()、reduce()、reduceRight()和some()。在ES5标准化之前，除了IE，其他浏览器已经实现了这些方法。</p>\n</blockquote>\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat()\"></a>concat()</h3><blockquote>\n<p>衔接数组</p>\n</blockquote>\n<h4 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.concat(value, ...)</div></pre></td></tr></table></figure>\n<h4 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>value, …</p>\n<p>​    任意个要衔接到array中的值。</p>\n<h4 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>一个新数组，包含array的元素，以及衔接的新元素。</p>\n<h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>concat()会将参数衔接到array中得到一个新的数组并返回。它不会修改array。如果传给concat()的某个参数本身是一个数组，则会将该数组的元素衔接到array中，而不是数组本身。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">a.concat(<span class=\"number\">4</span>, <span class=\"number\">5</span>);\t\t\t\t<span class=\"comment\">// 返回 [1, 2, 3, 4, 5]</span></div><div class=\"line\">a.concat([<span class=\"number\">4</span>, <span class=\"number\">5</span>]);\t\t\t<span class=\"comment\">// 返回 [1, 2, 3, 4, 5]</span></div><div class=\"line\">a.concat([<span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">6</span>, <span class=\"number\">7</span>]);\t<span class=\"comment\">// 返回 [1, 2, 3, 4, 5, 6, 7]</span></div><div class=\"line\">a.concat(<span class=\"number\">4</span>, [<span class=\"number\">5</span>, [<span class=\"number\">6</span>, <span class=\"number\">7</span>]]);\t<span class=\"comment\">// 返回 [1, 2, 3, 4, 5, [6, 7]]</span></div></pre></td></tr></table></figure>\n<h3 id=\"every-ES5\"><a href=\"#every-ES5\" class=\"headerlink\" title=\"every() - ES5\"></a>every() - ES5</h3><blockquote>\n<p>测试断言函数是否对每个元素为真。</p>\n</blockquote>\n<h4 id=\"概要-1\"><a href=\"#概要-1\" class=\"headerlink\" title=\"概要\"></a>概要</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.every(predicate)</div><div class=\"line\">array.every(predicate, o)</div></pre></td></tr></table></figure>\n<h4 id=\"参数-2\"><a href=\"#参数-2\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>predicate</p>\n<p>​    用来测试数组元素的断言函数。</p>\n<p>o</p>\n<p>​    调用predicate时的可选this值。</p>\n<h4 id=\"返回值-2\"><a href=\"#返回值-2\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>如果对array的每一个元素调用predicate时都返回真值，则返回true。如果有任何一个元素调用predicate时返回假值，则返回false。</p>\n<h4 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>every()方法用来测试数组的所有元素是否都满足某些条件。它会按照序号从小到大的顺序遍历array中的元素，并对每个元素调用predicate函数，如果predicate返回false（或任何可以转化为false值），则every()会停止遍历，并立刻返回false。如果predicate的每一次调用都返回true，则every()返回true。当遍历的数组为空时，every()返回true。</p>\n<p>对数组的每一个序号i，调用predicate时带有三个参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">predicate(array[i], i, array)</div></pre></td></tr></table></figure>\n<p>predicate的返回值会当做布尔值解析。true和所有真值表示该数组元素通过了测试或者说满足该函数所描述的条件。如果返回值为false或假值，则表示数组元素没有通过测试。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x &lt; <span class=\"number\">5</span>; &#125;)\t<span class=\"comment\">// =&gt; true: 所有元素都 &lt; 5</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x &lt; <span class=\"number\">3</span>; &#125;)\t<span class=\"comment\">// =&gt; false: 不是所有元素都 &lt; 3</span></div><div class=\"line\">[].every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;)\t\t\t<span class=\"comment\">// =&gt; true: []总是返回true</span></div></pre></td></tr></table></figure>\n<h3 id=\"filter-ES5\"><a href=\"#filter-ES5\" class=\"headerlink\" title=\"* filter() - ES5\"></a>* filter() - ES5</h3><blockquote>\n<p>返回通过断言的数组元素。</p>\n</blockquote>\n<h4 id=\"概要-2\"><a href=\"#概要-2\" class=\"headerlink\" title=\"概要\"></a>概要</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.map(predicate)</div><div class=\"line\">array.map(predicate, o)</div></pre></td></tr></table></figure>\n<h4 id=\"参数-3\"><a href=\"#参数-3\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>predicate</p>\n<p>​    用来判断array中的元素是否需要包含在返回数组中的调用函数。</p>\n<p>o</p>\n<p>​    调用predicate时的可选this值。</p>\n<h4 id=\"返回值-3\"><a href=\"#返回值-3\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>一个新数组，只包含那些让predicate返回真值的数组元素。</p>\n<h4 id=\"描述-2\"><a href=\"#描述-2\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>filter()会创建一个新数组，包含那些让predicate函数返回真值的array的元素。</p>\n<p>…</p>\n<h4 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x &gt; <span class=\"number\">1</span>; &#125;);\t<span class=\"comment\">// =&gt; [2, 3]</span></div></pre></td></tr></table></figure>\n<h3 id=\"forEach-ES5\"><a href=\"#forEach-ES5\" class=\"headerlink\" title=\"* forEach() - ES5\"></a>* forEach() - ES5</h3><blockquote>\n<p>为每一个数组元素调用一个函数。</p>\n</blockquote>\n<h4 id=\"概要-3\"><a href=\"#概要-3\" class=\"headerlink\" title=\"概要\"></a>概要</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.forEach(f)</div><div class=\"line\">array.forEach(f, o)</div></pre></td></tr></table></figure>\n<h4 id=\"返回值-4\"><a href=\"#返回值-4\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>该方法为返回值。</p>\n<h4 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, i, a</span>) </span>&#123; a[i]++; &#125;);\t<span class=\"comment\">// a现在是 [2, 3, 4]</span></div></pre></td></tr></table></figure>\n<h3 id=\"indexOf-ES5\"><a href=\"#indexOf-ES5\" class=\"headerlink\" title=\"indexOf() - ES5\"></a>indexOf() - ES5</h3><blockquote>\n<p>查找数组</p>\n</blockquote>\n<h4 id=\"概要-4\"><a href=\"#概要-4\" class=\"headerlink\" title=\"概要\"></a>概要</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.indexOf(value)</div><div class=\"line\">array.indexOf(value, start)</div></pre></td></tr></table></figure>\n<h4 id=\"返回值-5\"><a href=\"#返回值-5\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>一个大于等于start的最小序号值，该序号值处的array元素与value全等。如果不存在匹配元素时，则返回-1。</p>\n<h4 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].indexOf(<span class=\"string\">'b'</span>);\t\t<span class=\"comment\">// =&gt; 1</span></div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].indexOf(<span class=\"string\">'d'</span>);\t\t<span class=\"comment\">// =&gt; -1</span></div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].indexOf(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>);\t<span class=\"comment\">// =&gt; -1</span></div></pre></td></tr></table></figure>\n<h3 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"* join()\"></a>* join()</h3><blockquote>\n<p>将数组元素衔接为字符串</p>\n</blockquote>\n<h4 id=\"概要-5\"><a href=\"#概要-5\" class=\"headerlink\" title=\"概要\"></a>概要</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.join()</div><div class=\"line\">array.join(separator)</div></pre></td></tr></table></figure>\n<h4 id=\"参数-4\"><a href=\"#参数-4\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>separator</p>\n<p>​    在返回的字符串中，用来分隔数组的某个元素与下一个元素的可选字符或字符串。</p>\n<p>​    如果省略，默认是英文逗号（,）。</p>\n<h4 id=\"示例-5\"><a href=\"#示例-5\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'testing'</span>);</div><div class=\"line\">s = a.join(<span class=\"string\">'+'</span>);\t\t<span class=\"comment\">// s 是字符串 \"1+2+3+testing\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"lastIndexOf-ES5\"><a href=\"#lastIndexOf-ES5\" class=\"headerlink\" title=\"lastIndexOf() - ES5\"></a>lastIndexOf() - ES5</h3><blockquote>\n<p>反向查找数组</p>\n</blockquote>\n<h4 id=\"概要-6\"><a href=\"#概要-6\" class=\"headerlink\" title=\"概要\"></a>概要</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.lastIndexOf(value)</div><div class=\"line\">array.lastIndexOf(value, start)</div></pre></td></tr></table></figure>\n<h3 id=\"map-ES5\"><a href=\"#map-ES5\" class=\"headerlink\" title=\"* map() - ES5\"></a>* map() - ES5</h3><blockquote>\n<p>从数组元素中计算新值。</p>\n</blockquote>\n<h4 id=\"概要-7\"><a href=\"#概要-7\" class=\"headerlink\" title=\"概要\"></a>概要</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.map(f)</div><div class=\"line\">array.map(f, o)</div></pre></td></tr></table></figure>\n<h4 id=\"示例-6\"><a href=\"#示例-6\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x*x; &#125;);\t<span class=\"comment\">// =&gt; [1, 4, 9]</span></div></pre></td></tr></table></figure>\n<h3 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h3><blockquote>\n<p>移除并返回数组的最后一个元素。</p>\n</blockquote>\n<h4 id=\"示例-7\"><a href=\"#示例-7\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>pop()与伴随的push()方法，可以提供先进后出（FILO）的栈功能。例如：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> stack = [];\t\t<span class=\"comment\">// stack: []</span></div><div class=\"line\">stack.push(<span class=\"number\">1</span>, <span class=\"number\">2</span>);\t<span class=\"comment\">// stack: [1,2]\t\t\t返回2</span></div><div class=\"line\">stack.pop();\t\t<span class=\"comment\">// stack: [1]\t\t\t返回2</span></div><div class=\"line\">stack.push([<span class=\"number\">4</span>, <span class=\"number\">5</span>]);\t<span class=\"comment\">// stack: [1, [4,5]]\t返回2</span></div><div class=\"line\">stack.pop();\t\t<span class=\"comment\">// stack: [1]\t\t\t返回[4,5]</span></div><div class=\"line\">stack.pop();\t\t<span class=\"comment\">// stack: []\t\t\t返回1</span></div></pre></td></tr></table></figure>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push()\"></a>push()</h3><blockquote>\n<p>给数组追加元素。</p>\n</blockquote>\n<h3 id=\"reduce-ES5\"><a href=\"#reduce-ES5\" class=\"headerlink\" title=\"* reduce() - ES5\"></a>* reduce() - ES5</h3><blockquote>\n<p>从数组元素中计算出一个值。</p>\n</blockquote>\n<h4 id=\"概要-8\"><a href=\"#概要-8\" class=\"headerlink\" title=\"概要\"></a>概要</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">array.reduce(f)</div><div class=\"line\">array.reduce(f, inital)</div></pre></td></tr></table></figure>\n<h4 id=\"参数-5\"><a href=\"#参数-5\" class=\"headerlink\" title=\"参数\"></a>参数</h4><p>f</p>\n<p>​    一个函数，可以合并两个值（比如两个数组元素），并返回一个“缩减”的新值。</p>\n<p>initial</p>\n<p>​    用来缩减数组的可选初始值。如果指定该参数，reduce()的行为会像是把该参数插入array的头部一样。</p>\n<h4 id=\"返回值-6\"><a href=\"#返回值-6\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>数组的化简值，该值时最后一次调用f时的返回值。</p>\n<h4 id=\"示例-8\"><a href=\"#示例-8\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x*y;</div><div class=\"line\">&#125;);\t\t<span class=\"comment\">// =&gt; 24: ((1*2)*3)*4</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x*y;</div><div class=\"line\">&#125;, <span class=\"number\">5</span>);\t\t<span class=\"comment\">// =&gt; 120: (((5*1)*2)*3)*4</span></div></pre></td></tr></table></figure>\n<h3 id=\"reduceRight-ES5\"><a href=\"#reduceRight-ES5\" class=\"headerlink\" title=\"reduceRight() - ES5\"></a>reduceRight() - ES5</h3><blockquote>\n<p>从右到左缩减数组</p>\n</blockquote>\n<h4 id=\"示例-9\"><a href=\"#示例-9\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">60</span>].reduceRight(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x/y;</div><div class=\"line\">&#125;);\t\t<span class=\"comment\">// =&gt; 3: (60/10)/2</span></div></pre></td></tr></table></figure>\n<h3 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"* reverse()\"></a>* reverse()</h3><blockquote>\n<p>颠倒数组中的元素顺序。</p>\n</blockquote>\n<h4 id=\"示例-10\"><a href=\"#示例-10\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);\t<span class=\"comment\">// a[0] == 1, a[2] == 3;</span></div><div class=\"line\">a.reverse();\t\t\t<span class=\"comment\">// 现在 a[0] == 3, a[2] == 1;</span></div></pre></td></tr></table></figure>\n<h3 id=\"shift\"><a href=\"#shift\" class=\"headerlink\" title=\"shift()\"></a>shift()</h3><blockquote>\n<p>移除数组的第一个元素。</p>\n</blockquote>\n<h3 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"* slice()\"></a>* slice()</h3><blockquote>\n<p>返回数组的一部分。</p>\n</blockquote>\n<h3 id=\"some-ES5\"><a href=\"#some-ES5\" class=\"headerlink\" title=\"some() - ES5\"></a>some() - ES5</h3><blockquote>\n<p>测试是否有元素满足断言函数。</p>\n</blockquote>\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h3><blockquote>\n<p>对数组元素进行排序。</p>\n</blockquote>\n<h3 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"* splice()\"></a>* splice()</h3><blockquote>\n<p>插入、删除或替换数组元素。</p>\n</blockquote>\n<h3 id=\"toLocaleString-NaN\"><a href=\"#toLocaleString-NaN\" class=\"headerlink\" title=\"toLocaleString()\"></a>toLocaleString()</h3><h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><h3 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h3><p>[^1]: 一个值时也行，只要不是数值，比如<code>new Array(&#39;1&#39;)</code><br>[^]: </p>\n","categories":[{"name":"记忆碎片","slug":"记忆碎片","permalink":"http://www.gqxqd.cn/categories/记忆碎片/"},{"name":"JavaScript","slug":"记忆碎片/JavaScript","permalink":"http://www.gqxqd.cn/categories/记忆碎片/JavaScript/"}],"tags":[{"name":"js数组方法","slug":"js数组方法","permalink":"http://www.gqxqd.cn/tags/js数组方法/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.gqxqd.cn/tags/JavaScript/"}]},{"title":"jsFiddleTest","date":"2017-10-04T13:00:08.000Z","path":"20171004/jsFiddleTest.html","content":"<h1 id=\"jsFiddle测试\"><a href=\"#jsFiddle测试\" class=\"headerlink\" title=\"jsFiddle测试\"></a>jsFiddle测试</h1><hr>\n<script async src=\"//jsfiddle.net/gqxqd/k2j2cuop/embed/html,css,result/\"></script>\n\n<hr>\n","categories":[],"tags":[]},{"title":"如何在服务器后台运行node程序","date":"2017-09-12T12:10:43.000Z","path":"20170912/run-nodejs-on-backend.html","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><blockquote>\n<p>在终端连接到服务器，运行 <code>node server.js</code>， 退出终端之后，程序就停止运行了。</p>\n</blockquote>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>使用 <code>forever</code> 包可以搞定，具体操作如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g forever --registry=http://registry.cnpmjs.org</div><div class=\"line\">forever start 脚本文件</div></pre></td></tr></table></figure></p>\n<h3 id=\"相关操作命令\"><a href=\"#相关操作命令\" class=\"headerlink\" title=\"相关操作命令\"></a>相关操作命令</h3><ol>\n<li><p><code>forever list</code> 查看所有 forever 运行的进程</p>\n</li>\n<li><p><code>forever stop uid</code> 停止运行指定 uid 的进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@VM nodejs]<span class=\"comment\"># forever list</span></div><div class=\"line\">info:    Forever processes running</div><div class=\"line\">data:        uid  <span class=\"built_in\">command</span>                                       script    forever pid   id logfile                 uptime        </div><div class=\"line\">data:    [0] 8EBQ /usr/<span class=\"built_in\">local</span>/src/node-v8.1.3-linux-x64/bin/node index.js  14135   14141    /root/.forever/8EBQ.log 0:0:56:47.299 </div><div class=\"line\">data:    [1] QH6m /usr/<span class=\"built_in\">local</span>/src/node-v8.1.3-linux-x64/bin/node server.js 18366   18372    /root/.forever/QH6m.log 0:0:0:3.22    </div><div class=\"line\">[root@VM nodejs]<span class=\"comment\"># forever stop QH6m</span></div><div class=\"line\">info:    Forever stopped process:</div><div class=\"line\">    uid  <span class=\"built_in\">command</span>                                       script    forever pid   id logfile                 uptime       </div><div class=\"line\">[0] QH6m /usr/<span class=\"built_in\">local</span>/src/node-v8.1.3-linux-x64/bin/node server.js 18366   18372    /root/.forever/QH6m.log 0:0:0:45.816</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","categories":[{"name":"记忆碎片","slug":"记忆碎片","permalink":"http://www.gqxqd.cn/categories/记忆碎片/"},{"name":"node.js","slug":"记忆碎片/node-js","permalink":"http://www.gqxqd.cn/categories/记忆碎片/node-js/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://www.gqxqd.cn/tags/node-js/"},{"name":"服务器","slug":"服务器","permalink":"http://www.gqxqd.cn/tags/服务器/"}]},{"title":"我的作品集","date":"2017-08-25T10:16:07.000Z","path":"20170825/my-works.html","content":"<h1 id=\"高校同乡会在线交流平台\"><a href=\"#高校同乡会在线交流平台\" class=\"headerlink\" title=\"高校同乡会在线交流平台\"></a>高校同乡会在线交流平台</h1><blockquote>\n<p>系统采用前端采用<code>Bootstrap</code>进行界面的布局，后台使用<code>Thinkphp</code>框架实现。</p>\n</blockquote>\n<p><a href=\"https://github.com/GQxQD/StudentAssociation\" target=\"_blank\" rel=\"external\">项目源码</a></p>\n<p><a href=\"http://gqxqd.cn\" target=\"_blank\" rel=\"external\">在线预览</a></p>\n<h1 id=\"在线云笔记系统\"><a href=\"#在线云笔记系统\" class=\"headerlink\" title=\"在线云笔记系统\"></a>在线云笔记系统</h1><h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><ul>\n<li>Vue</li>\n<li>Element UI</li>\n</ul>\n<h2 id=\"后台\"><a href=\"#后台\" class=\"headerlink\" title=\"后台\"></a>后台</h2><ul>\n<li>Spring</li>\n<li>SpringMVC</li>\n<li>Mybatis</li>\n</ul>\n<p><a href=\"https://github.com/GQxQD/cloud_note\" target=\"_blank\" rel=\"external\">项目源码</a></p>\n<p><a href=\"http://note.gqxqd.cn\" target=\"_blank\" rel=\"external\">在线预览</a></p>\n","categories":[],"tags":[{"name":"我的作品","slug":"我的作品","permalink":"http://www.gqxqd.cn/tags/我的作品/"}]},{"title":"webpack学习笔记01","date":"2017-08-24T03:45:00.000Z","path":"20170824/webpack-note-01.html","content":"<h2 id=\"webpack的安装和命令行\"><a href=\"#webpack的安装和命令行\" class=\"headerlink\" title=\"webpack的安装和命令行\"></a>webpack的安装和命令行</h2><p>1.创建项目文件夹<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir webpack-test</div><div class=\"line\"><span class=\"built_in\">cd</span> webpack-test</div></pre></td></tr></table></figure></p>\n<p>2.初始化项目信息<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure></p>\n<p>3.安装<code>webpack</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install webpack --save-dev</div></pre></td></tr></table></figure></p>\n<p>4.创建<code>hello.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">    alert(str);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.使用webpack打包<code>hello.js</code>为<code>hello.bundle.js</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack hello.js hello.bundle.js</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Hash: cfd091774cd550696b74 \t\t// 生成的哈希值</div><div class=\"line\">Version: webpack 3.4.1\t\t\t// 打包webpack的版本</div><div class=\"line\">Time: 66ms\t\t\t\t\t\t// 打包花费的时间</div><div class=\"line\">          Asset     Size  Chunks             Chunk Names</div><div class=\"line\">hello.bundle.js  2.51 kB       0  [emitted]  main</div><div class=\"line\">   [0] ./hello.js 41 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure>\n<p>生成的<code>hello.bundle.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/******/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) </span>&#123; <span class=\"comment\">// webpackBootstrap</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The module cache</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> installedModules = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The require function</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Check if module is in cache</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">return</span> installedModules[moduleId].exports;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Create a new module (and put it into the cache)</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = installedModules[moduleId] = &#123;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\ti: moduleId,</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\tl: <span class=\"literal\">false</span>,</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\texports: &#123;&#125;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Execute the module function</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t\tmodules[moduleId].call(<span class=\"built_in\">module</span>.exports, <span class=\"built_in\">module</span>, <span class=\"built_in\">module</span>.exports, __webpack_require__);</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Flag the module as loaded</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"built_in\">module</span>.l = <span class=\"literal\">true</span>;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Return the exports of the module</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t&#125;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// expose the modules object (__webpack_modules__)</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.m = modules;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// expose the module cache</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.c = installedModules;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// define getter function for harmony exports</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.d = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exports, name, getter</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span>(!__webpack_require__.o(exports, name)) &#123;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"built_in\">Object</span>.defineProperty(exports, name, &#123;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\tconfigurable: <span class=\"literal\">false</span>,</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\tenumerable: <span class=\"literal\">true</span>,</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\tget: getter</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\t&#125;);</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t&#125;;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// getDefaultExport function for compatibility with non-harmony modules</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.n = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> getter = <span class=\"built_in\">module</span> &amp;&amp; <span class=\"built_in\">module</span>.__esModule ?</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDefault</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>[<span class=\"string\">'default'</span>]; &#125; :</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getModuleExports</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>; &#125;;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_require__.d(getter, <span class=\"string\">'a'</span>, getter);</div><div class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> getter;</div><div class=\"line\"><span class=\"comment\">/******/</span> \t&#125;;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// Object.prototype.hasOwnProperty.call</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.o = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, property</span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(object, property); &#125;;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// __webpack_public_path__</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.p = <span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"comment\">/******/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// Load entry module and return exports</span></div><div class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">return</span> __webpack_require__(__webpack_require__.s = <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">/******/</span> &#125;)</div><div class=\"line\"><span class=\"comment\">/************************************************************************/</span></div><div class=\"line\"><span class=\"comment\">/******/</span> ([</div><div class=\"line\"><span class=\"comment\">/* 0 */</span></div><div class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, exports</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">    alert(str);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/***/</span> &#125;)</div><div class=\"line\"><span class=\"comment\">/******/</span> ]);</div></pre></td></tr></table></figure></p>\n<p>6.新建<code>world.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">world</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>7.修改<code>hello.js</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./world.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">    alert(str);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>8.再次执行打包命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack hello.js hello.bundle.js</div><div class=\"line\">Hash: 6404649d5ce4b073e4d6</div><div class=\"line\">Version: webpack 3.4.1</div><div class=\"line\">Time: 76ms</div><div class=\"line\">          Asset     Size  Chunks             Chunk Names</div><div class=\"line\">hello.bundle.js  2.65 kB       0  [emitted]  main</div><div class=\"line\">   [0] ./hello.js 67 bytes &#123;0&#125; [built]</div><div class=\"line\">   [1] ./world.js 37 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure></p>\n<p>９.添加<code>style.css</code>文件<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">body</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#9df</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>10.修改<code>hello.js</code>文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./world.js'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./style.css'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">    alert(str);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11.打包出现错误，原因是没有安装 <code>css-loader</code> 和 <code>style-loader</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack hello.js hello.bundle.js</div><div class=\"line\">Hash: 1c0c9f484c0804ffd23f</div><div class=\"line\">Version: webpack 3.4.1</div><div class=\"line\">Time: 78ms</div><div class=\"line\">          Asset     Size  Chunks             Chunk Names</div><div class=\"line\">hello.bundle.js  2.97 kB       0  [emitted]  main</div><div class=\"line\">   [0] ./hello.js 92 bytes &#123;0&#125; [built]</div><div class=\"line\">   [1] ./world.js 37 bytes &#123;0&#125; [built]</div><div class=\"line\">   [2] ./style.css 234 bytes &#123;0&#125; [built] [failed] [1 error]</div><div class=\"line\"></div><div class=\"line\">ERROR <span class=\"keyword\">in</span> ./style.css</div><div class=\"line\">Module parse failed: webpack-test\\style.css Unexpected token (1:11)</div><div class=\"line\">You may need an appropriate loader to handle this file <span class=\"built_in\">type</span>.</div><div class=\"line\">| html, body &#123;</div><div class=\"line\">|     padding: 0;</div><div class=\"line\">|     margin: 0;</div><div class=\"line\"> @ ./hello.js 2:0-22</div></pre></td></tr></table></figure></p>\n<p>12.安装 <code>css-loader</code> 和 <code>style-loader</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install css-loader style-loader --save-dev</div></pre></td></tr></table></figure></p>\n","categories":[{"name":"记忆碎片","slug":"记忆碎片","permalink":"http://www.gqxqd.cn/categories/记忆碎片/"},{"name":"webpack","slug":"记忆碎片/webpack","permalink":"http://www.gqxqd.cn/categories/记忆碎片/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"http://www.gqxqd.cn/tags/webpack/"},{"name":"笔记","slug":"笔记","permalink":"http://www.gqxqd.cn/tags/笔记/"}]}]